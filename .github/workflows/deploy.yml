name: CI/CD Pipeline to EC2

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      # Build the Docker image (tests run during build)
      - name: Build Docker image
        run: |
          IMAGE_NAME=${{ secrets.DOCKER_HUB_USERNAME }}/myapp:latest
          docker build -t $IMAGE_NAME .

      # Push the Docker image if tests passed
      - name: Push Docker image
        run: |
          IMAGE_NAME=${{ secrets.DOCKER_HUB_USERNAME }}/myapp:latest
          docker push $IMAGE_NAME

      # Deploy to EC2
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            IMAGE_NAME=${{ secrets.DOCKER_HUB_USERNAME }}/myapp:latest
            if ! command -v docker > /dev/null; then
              sudo apt update
              sudo apt install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
            fi
     # Stop and remove the container if it exists
      if [ "$(sudo docker ps -q -f name=myapp-container)" ]; then
        echo "Stopping existing container..."
        sudo docker stop myapp-container
      fi

      if [ "$(sudo docker ps -aq -f name=myapp-container)" ]; then
        echo "Removing existing container..."
        sudo docker rm myapp-container
      fi
            sudo docker pull $IMAGE_NAME
            sudo docker run -d --name myapp-container -p 5000:5000 $IMAGE_NAME
